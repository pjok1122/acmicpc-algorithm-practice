'''
[문제 풀기 전 생각할 것]

이쯤되면 많이 익숙해진다. 수열의 문제를 해결 할때에는, dp[i] := arr[i]로 끝나는 (____) 값 형태로 설정하는 경우가 많다.

반드시 이렇게 놓아야 하는 것은 아니지만, 이렇게 놓을 경우 빈틈없이 처리할 수 있으며 식을 세우는 데에도 별 어려움이 없다.

이 문제도 마찬가지다. 연속합을 최대로 만드는 문제인데,

dp[i] = arr[i]로 끝나는 최대 연속합

으로 설정하면 문제가 비교적 쉬워진다.

우리가 고려해야 할 식은 딱 한 개,

dp[i] = max(dp[i-1]+arr[i], arr[i]) 이다.

여기서 arr[i]와 dp[i-1]+arr[i]를 고려하는 이유는, 데이터가 2개 이상인 상태에서 arr[i]에서 끝날 수도 있지만, arr[i] 한 개의 데이터가 값이 더 클 수도 있기 때문이다.

예를 들어, 수열이 [-25, 5] 으로 주어진다면,

-25+5 = -20을 선택하는 것 보다는, 5 하나만 선택하는 것이 더 크다는 의미이다.

'''

n = int(input())
arr = list(map(int, input().split()))
dp = [-1000]*n
dp[0] = arr[0]
for i in range(1, n):
    dp[i] = max(dp[i-1]+arr[i], arr[i])

print(max(dp))
